# Makefile.include is a symbolic link to the desired
# Makefile.include.<compiler> file.
include Makefile.include

# Location of the psyclone source files (for doing the code
# generation)
PSYCLONE = ${PSYCLONE_DIR}

# Location of the code defining the GOcean API
API_VERSION=1.0
API_DIR = ../api_v${API_VERSION}
API_LIB = ${API_DIR}/gocean_api.a

# The targets that this Makefile supports
EXECS = nemolite2d nemolite2d_gen nemolite2d_gen_omp

# The modules that are common to both targets
MODULES = model_mod.o boundary_conditions_mod.o \
          continuity_mod.o initialisation_mod.o \
          momentum_mod.o physical_params_mod.o \
          time_update_mod.o gocean2d_io_mod.o

# API lib is an archive that must come at the end of the list of objects
# passed to the linker
COMMON_MODULES = $(MODULES) ${API_LIB}

all: $(EXECS)

# Targets involving the code-generation framework. nemolite2d_gen.f90 is
# generated by PSyclone from nemolite2d_alg.f90 which contains the
# definition of the Algorithm.
nemolite2d_gen.f90: infrastructure_mod.f90 nemolite2d_alg.f90
	python ${PSYCLONE}/src/generator.py -api gocean1.0 -oalg nemolite2d_gen.f90 -opsy psy.f90 nemolite2d_alg.f90

# psy.f90 is generated at the same time as nemolite2d_gen.f90
psy.f90: nemolite2d_gen.f90

# psy_omp.f90 is the same PSy layer but with OpenMP transformations
# applied to it.
psy_omp.f90: nemolite2d_alg.f90 nemolite2d_omp_transform.py
	python ${PSYCLONE}/src/generator.py -api gocean1.0 -s ./nemolite2d_omp_transform.py -oalg nemolite2d_gen.f90 -opsy psy_omp.f90 nemolite2d_alg.f90

# psy_acc.f90 is the same PSy layer but with OpenACC transformations
# applied to it.
psy_acc.f90: nemolite2d_alg.f90 nemolite2d_acc_transform.py
	python ${PSYCLONE}/src/generator.py -api gocean1.0 nemolite2d_alg.f90 -oalg nemolite2d_gen.f90 -opsy psy_acc.f90 -s ./nemolite2d_acc_transform.py

# Normal targets. Need to link with OpenMP in order to use OMP timer
nemolite2d: ${API_LIB} ${MODULES} time_step_mod.o nemolite2d.o
	${MAKE} MODULE_LIST="nemolite2d.o time_step_mod.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d.exe

# Version of nemolite2d with the time-stepping routine hacked to
# encourage the Intel compiler to vectorise efficiently
nemolite2d_align: ${COMMON_MODULES} time_step_mod_align.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_align.exe

nemolite2d_cont_only: ${COMMON_MODULES} time_step_mod_cont_only.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_cont_only.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_cont_only.exe

nemolite2d_nodiv: ${COMMON_MODULES} time_step_mod_align_nodiv.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_nodiv
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align_nodiv.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_nodiv.exe

nemolite2d_preload: ${COMMON_MODULES} time_step_mod_align_preload.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align_preload.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_preload.exe

nemolite2d_alignall: ${COMMON_MODULES} time_step_mod_alignall_preload.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_alignall.exe

nemolite2d_nopeel: ${COMMON_MODULES} time_step_mod_alignall_preload_nopeel.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload_nopeel.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_nopeel.exe

nemolite2d_8arrays: ${COMMON_MODULES} time_step_mod_alignall_preload_nopeel_8arrays.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload_nopeel_8arrays.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_8arrays.exe

# The generated code depends on the generated Psy middle-layer
nemolite2d_gen: time_step_mod.o nemolite2d_gen.o psy.o infrastructure_mod.o${MODULES}
	${MAKE} MODULE_LIST="nemolite2d_gen.o psy.o infrastructure_mod.o ${MODULES} time_step_mod.o ${API_LIB}" LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen.exe

nemolite2d_gen_omp:
	${MAKE} MODULE_LIST="nemolite2d_gen.o psy_omp.o infrastructure_mod.o time_step_mod.o ${COMMON_MODULES}" \
             F90FLAGS="${F90FLAGS} ${OMPFLAGS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen_omp.exe

nemolite2d_gen_acc:
	${MAKE} MODULE_LIST="nemolite2d_gen.o psy_acc.o infrastructure_mod.o time_step_mod.o ${COMMON_MODULES}" \
             F90FLAGS="${F90FLAGS} ${OMPFLAGS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen_acc.exe

# Our module providing fake infrastructure kernels is in the API directory
# but we need it to be in the same directory as all of the other kernel
# files.
infrastructure_mod.f90:
	ln -sf ${API_DIR}/infrastructure_mod.f90 .


${API_LIB}: ${API_DIR}/*.?90
	${MAKE} -C ${API_DIR} F90="${F90}" F90FLAGS="${F90FLAGS}" \
            OMPFLAGS="${OMPFLAGS}" AR="${AR}" ARFLAGS="${ARFLAGS}" \
            API_LIB="gocean_api.a"


nemolite2d_gen.o: infrastructure_mod.o $(COMMON_MODULES) time_step_mod.o psy.o

# Interdependencies between modules, alphabetical order

boundary_conditions_mod.o: physical_params_mod.o ${API_LIB} model_mod.o
continuity_mod.o: model_mod.o ${API_LIB}
gocean2d_io_mod.o: ${API_LIB}
infrastructure_mod.o: ${API_LIB}
model_mod.o: ${API_LIB} gocean2d_io_mod.o
momentum_mod.o: model_mod.o physical_params_mod.o ${API_DIR}/kind_params_mod.o
time_step_mod.o: ${API_LIB} momentum_mod.o continuity_mod.o \
                 time_update_mod.o boundary_conditions_mod.o
time_update_mod.o: model_mod.o ${API_LIB}

# Generic rules

%.exe: $(MODULE_LIST)
	$(F90) -o $@ $(MODULE_LIST) ${TIMER_LIB} $(LDFLAGS)

%.o: %.f90
	$(F90) $(F90FLAGS) -I${API_DIR} -I${TIMER_INC} -c $<

%.o: %.F90
	$(F90) $(F90FLAGS) -I${API_DIR} -I${TIMER_INC} -c $<

clean: 
	${MAKE} -C ${API_DIR} clean
	rm -f *.o *.mod *.MOD *~ psy.f90 psy_omp.f90 nemolite2d_gen.f90

allclean: clean
	rm -f infrastructure_mod.f90
	rm -f *.exe fparser.log
	rm -f *.lst *.cg *.opt *.optrpt *.s
	rm -rf *_wpl_dir/

docs:
	doxygen gocean2d.doxy.config
