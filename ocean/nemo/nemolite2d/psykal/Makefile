# This Makefile expects the following env. vars to be set:
#
# F90       - How to invoke the Fortran compiler
# F90FLAGS  - Flags to pass to the Fortran compiler
# OMPFLAGS  - Flags for compiling with OpenMP
# AR        - Command to use when creating an archive (.a)

.PHONY: inf_lib timer_lib nemolite2d nemolite2d_gen nemolite2d_gen_omp

# Location of the dl_timer and infrastucture code
SHARED_DIR = ../../../../shared

TIMER_DIR = ${SHARED_DIR}/dl_timer
TIMER_INC = ${TIMER_DIR}/src
TIMER_LIB = ${TIMER_DIR}/dl_timer_lib.a
INF_DIR = ${SHARED_DIR}/dl_esm_inf/finite_difference
INF_INC = ${INF_DIR}/src
INF_LIB = ${INF_DIR}/src/dl_esm_inf_fd.a
COMMON_DIR = ../common
COMMON_LIB = ${COMMON_DIR}/nemolite2d_common.a

LIBS = ${COMMON_LIB} ${TIMER_LIB} ${INF_LIB}

# The targets that this Makefile supports
EXECS = nemolite2d nemolite2d_gen nemolite2d_gen_omp

# The kernels used by this application and their location
KERNEL_DIR = ../kernels/fortran
KERNELS = boundary_conditions_mod.o \
          continuity_mod.o \
          momentum_mod.o \
          time_update_mod.o \
          infrastructure_mod.o

# INF_LIB is an archive that must come at the end of the list of objects
# passed to the linker
COMMON_MODULES = $(KERNELS) ${COMMON_LIB} ${INF_LIB}

# Shorthand for invoking PSyclone
PSYCLONE = psyclone -l -api gocean1.0 -d ${KERNEL_DIR}


all: $(EXECS)

# Targets involving the code-generation framework. nemolite2d_gen.f90 and
# psy.f90 are generated by PSyclone from nemolite2d_alg.f90 which contains
# the definition of the Algorithm.
psy.f90: nemolite2d_alg.f90
	${PSYCLONE} -oalg nemolite2d_gen.f90 -opsy psy.f90 nemolite2d_alg.f90

# psy_omp.f90 is the same PSy layer but with OpenMP transformations
# applied to it.
psy_omp.f90: nemolite2d_alg.f90 nemolite2d_omp_transform.py
	${PSYCLONE} -s ./nemolite2d_omp_transform.py -oalg nemolite2d_gen.f90 -opsy psy_omp.f90 nemolite2d_alg.f90

# psy_acc.f90 is the same PSy layer but with OpenACC transformations
# applied to it.
psy_acc.f90: nemolite2d_alg.f90 nemolite2d_acc_transform.py
	${PSYCLONE} nemolite2d_alg.f90 -oalg nemolite2d_gen.f90 -opsy psy_acc.f90 -s ./nemolite2d_acc_transform.py

# Normal targets. Need to link with OpenMP in order to use OMP timer
nemolite2d: inf_lib ${KERNELS} time_step_mod.o nemolite2d.o
	${MAKE} MODULE_LIST="nemolite2d.o time_step_mod.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d.exe

# Version of nemolite2d with the time-stepping routine hacked to
# encourage the Intel compiler to vectorise efficiently
nemolite2d_align: ${COMMON_MODULES} ${KERNELS} time_step_mod_align.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align.o nemolite2d.o ${COMMON_MODULES} ${LIBS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_align.exe

nemolite2d_cont_only: ${COMMON_MODULES} ${KERNELS} time_step_mod_cont_only.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_cont_only.o nemolite2d.o ${COMMON_MODULES} ${LIBS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_cont_only.exe

nemolite2d_nodiv: ${COMMON_MODULES} ${KERNELS} time_step_mod_align_nodiv.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_nodiv
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align_nodiv.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_nodiv.exe

nemolite2d_preload: ${COMMON_MODULES} ${KERNELS} time_step_mod_align_preload.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod.o time_step_mod.mod
	${MAKE} MODULE_LIST="time_step_mod_align_preload.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_preload.exe

nemolite2d_alignall: ${COMMON_MODULES} ${KERNELS} time_step_mod_alignall_preload.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_alignall.exe

nemolite2d_nopeel: ${COMMON_MODULES} ${KERNELS} time_step_mod_alignall_preload_nopeel.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload_nopeel.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_nopeel.exe

nemolite2d_8arrays: ${COMMON_MODULES} ${KERNELS} time_step_mod_alignall_preload_nopeel_8arrays.o nemolite2d.o
        # Have to delete any existing time_step_mod because it contains a module
        # with the same name as that in time_step_mod_align_preload
	rm -f time_step_mod*.o time_step_mod*.mod
	${MAKE} MODULE_LIST="time_step_mod_alignall_preload_nopeel_8arrays.o nemolite2d.o ${COMMON_MODULES}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_8arrays.exe

# The generated code depends on the generated Psy middle-layer
nemolite2d_gen: time_step_mod.o psy.o ${KERNELS}
	${MAKE} MODULE_LIST="psy.o nemolite2d_gen.o ${MODULES} time_step_mod.o ${LIBS}" LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen.exe

nemolite2d_gen_omp: ${KERNELS}
	${MAKE} MODULE_LIST="psy_omp.o nemolite2d_gen.o time_step_mod.o ${COMMON_MODULES}" \
             F90FLAGS="${F90FLAGS} ${OMPFLAGS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen_omp.exe

nemolite2d_gen_acc: ${KERNELS}
	${MAKE} MODULE_LIST="psy_acc.o nemolite2d_gen.o time_step_mod.o ${COMMON_MODULES}" \
             F90FLAGS="${F90FLAGS} ${OMPFLAGS}" \
             LDFLAGS="${LDFLAGS} ${OMPFLAGS}" nemolite2d_gen_acc.exe

# Generic rules

%.exe: $(MODULE_LIST)
	$(F90) -o $@ $(MODULE_LIST) ${TIMER_LIB} $(LDFLAGS)

%.o: %.f90
	$(F90) $(F90FLAGS) -I${COMMON_DIR} -I${INF_INC} -I${TIMER_INC} -c $<
%.o: %.F90
	$(F90) $(F90FLAGS) -I${COMMON_DIR} -I${INF_INC} -I${TIMER_INC} -c $<

# If we need a .f90 file that doesn't exist then it must be a kernel.
# Create a link to the required file...
%.f90:
	ln -sf ${KERNEL_DIR}/$@ .

timer_lib:
	${MAKE} -C ${TIMER_DIR} sm_lib

inf_lib:
	${MAKE} -C ${INF_DIR}

${COMMON_LIB}:
	${MAKE} -C ${COMMON_DIR}

clean: 
	rm -f *.o *.mod *.MOD *~ *.pyc psy.f90 psy_omp.f90 psy_acc.f90 \
nemolite2d_gen.f90

libclean:
	${MAKE} -C ${INF_DIR} clean

allclean: clean
	rm -f ${KERNELS:.o=.f90}
	rm -f *.exe fparser.log
	rm -f *.lst *.cg *.opt *.optrpt gnu_opt_report.txt *.s
	rm -rf *_wpl_dir/

docs:
	doxygen gocean2d.doxy.config
