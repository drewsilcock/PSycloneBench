This code is version 0.1.1 of the GOcean version of 'shallow' - a
benchmark shallow-water code originally written by Paul
Swartztrauber of NCAR.

The directory named 'original' contains pretty much the original
version of the code as received by this project. The current directory
contains a 'PSyKAl' version of the code where PSyKAl stands for
Parallel System, Kernel and Algorithm layers. In this version all
computation is performed in point-wise kernels (the bottom layer). The
algorithm (top) layer specifies operations on the whole solution
arrays. The middle layer (prefixed by invoke_'s) glues the Algorithm
and Kernel layers together. Ultimately this middle layer will be 
generated by the PSyclone system but that's another story.

1: the original (single-file) version

We are particularly interested in a "how fast can you go" solution for
this version, where you are allowed to change what you like as long as
you get the same results! The aggressive optimisations and resultant
performance improvements are exactly what we would like to see. If it
so happens that different optimisations give better performance at
different resolutions then please feel free to implement different
versions (if you have time of course!).

2: the PSyKAl (multi-file) version

The idea of the PSyKAl (multi-file) version is also to optimise as
much as possible, i.e. "as fast as you can go", but to limit any
optimisations to the PSy layer. In practice, for this code, this means
optimisations are limited to within the invoke_time_step()
routine. Note, getting the compiler to inline via structural changes
is also interesting to us as it informs us how we might need to write
kernels in the future.

3: A note on timing calls

The only timing we actually require is the timer around the timestep
loop (which begins at timestep 2). Other timers might be useful to see
how the different parts of the code scale but should not get in the
way of optimisations. As an example, if you fused two loops together,
each with their own timer then the obvious thing to do would be to
replace the two timers with a single timer (appropriately named)
around the fused loop.

If you have any questions about this then feel free to contact
either Andrew Porter or Rupert Ford who can be reached at firstname
dot lastname at stfc.ac.uk.
